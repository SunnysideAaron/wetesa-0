# ADR-012 Linters  

## Status

Accepted, Proposed, Deprecated or Superseded (list DR)

## Context

We want to turn on linters. Which ones?

All 3 linter stages turned on from book.

aaron does not like single line if else statements
they easily hide scope and lessen readability.
have to reedit later when maintaining anyway.
can these be linted out?
    https://www.calhoun.io/one-liner-if-statements-with-errors/

markdown linter

https://www.reddit.com/r/golang/comments/1jepzes/alternatives_to_golangcilint_that_are_fast/

## Decision



## Why / Notes



## Consequences



## Other Options

Possibilities:

- https://github.com/fe3dback/go-arch-lint
- https://github.com/avelino/awesome-go?tab=readme-ov-file#code-analysis
- https://github.com/go-simpler/sloglint

A linter like sloglint can help you enforce various rules for Slog based on your preferred code style. Here's an example configuration when used through golangci-lint:



https://www.reddit.com/r/golang/comments/1in0tiw/simple_strategy_to_understand_error_handling_in_go/
errorlint in golangci-lint will throw a lint warning if you use == or != to compare an error instead of errors.Is. I find it very useful, and it is even in the class of linter that has caught an actual bug in my code and not just given style suggestions. I recommend it.

Note that this is not errcheck, which is on by default. errorlint must be enabled explicitly.


Not an option:

