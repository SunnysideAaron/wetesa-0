# ADR-012 Linters  

## Status

Accepted, Proposed, Deprecated or Superseded (list DR)

## Context

Linters help catch code smells and enforce coding standards.

## Decision

- [Staticcheck](https://staticcheck.dev/)
- [revive](https://revive.run/)
  - TODO Additional rules
- [golangci-lint](https://golangci-lint.run/)
- [govulncheck](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck)

## Why / Notes

- "Learning Go. An Idiomatic Approach..Real-world Go Programming 2ed 2024" by Bodner J.
  - [Staticcheck](https://staticcheck.dev/)
  - [revive](https://revive.run/)
  - [golangci-lint](https://golangci-lint.run/)
  - [govulncheck](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck)

### golangci-lint Notes
- https://www.reddit.com/r/golang/comments/1jepzes/alternatives_to_golangcilint_that_are_fast/
  - Be careful with versions of golangci compatible with your go compiler. If they mismatch it will be extra slow and take 100% CPU for minutes. 
  - What we did in my team was to only lint the changed files on push and lint all files inside CI/CD. And use the generated cache! 
  - there are other notes on how to only lint changed files.
  - Make sure NOT to install golangci via "go install"


We want to turn on linters. Which ones?

All 3 linter stages turned on from book.

aaron does not like single line if else statements
they easily hide scope and lessen readability.
have to reedit later when maintaining anyway.
can these be linted out?
    https://www.calhoun.io/one-liner-if-statements-with-errors/

markdown linter

https://www.reddit.com/r/golang/comments/1jepzes/alternatives_to_golangcilint_that_are_fast/

Linter aggregators?
golangci-lint

## Consequences

Better code

## Other Options

Possibilities:

- https://github.com/fe3dback/go-arch-lint
- https://github.com/avelino/awesome-go?tab=readme-ov-file#code-analysis
- https://github.com/go-simpler/sloglint

A linter like sloglint can help you enforce various rules for Slog based on your preferred code style. Here's an example configuration when used through golangci-lint:



https://www.reddit.com/r/golang/comments/1in0tiw/simple_strategy_to_understand_error_handling_in_go/
errorlint in golangci-lint will throw a lint warning if you use == or != to compare an error instead of errors.Is. I find it very useful, and it is even in the class of linter that has caught an actual bug in my code and not just given style suggestions. I recommend it.

Note that this is not errcheck, which is on by default. errorlint must be enabled explicitly.


Not an option:

