services:
  datastore:
    # https://github.com/bitnami/containers/blob/main/bitnami/postgresql/README.md
    image: bitnami/postgresql:17-debian-12
    container_name: datastore
    #TODO restart may mask errors. Leave commented out till production
    #restart: unless-stopped
    networks:
      - app-tier
    environment:
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      # TODO timezone and timezone in log
      # https://github.com/bitnami/containers/blob/main/bitnami/postgresql/README.md#configuring-time-zone
    ports:
      - '${DATASTORE_PORT}:${DATASTORE_PORT}'  
    volumes:
       - ./datastore/initdb:/docker-entrypoint-initdb.d
       - ./datastore/persistence:/bitnami/postgresql
    # TODO this was part of go-Blueprint. Isn't used by the code though. determine how and if to use.   
    # healthcheck:
    #   test: ["CMD-SHELL", "sh -c 'pg_isready -U ${BLUEPRINT_DB_USERNAME} -d ${BLUEPRINT_DB_DATABASE}'"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 15s   
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api
    #TODO restart may mask errors. Leave commented out till production
    #restart: unless-stopped
    networks:
      - app-tier
    environment:
      API_HOST: ${API_HOST}
      API_PORT: ${API_PORT}
      API_READ_TIME_OUT:  ${API_READ_TIME_OUT}
      API_WRITE_TIME_OUT: ${API_WRITE_TIME_OUT}
      API_IDLE_TIME_OUT:  ${API_IDLE_TIME_OUT}
      DATASTORE_HOST: ${DATASTORE_HOST}
      DATASTORE_PORT: ${DATASTORE_PORT}
      POSTGRESQL_DATABASE: ${POSTGRESQL_DATABASE}
      POSTGRESQL_USERNAME: ${POSTGRESQL_USERNAME}
      POSTGRESQL_PASSWORD: ${POSTGRESQL_PASSWORD}
      POSTGRESQL_SCHEMA: ${POSTGRESQL_SCHEMA}
      POOL_MAX_CONNS: ${POOL_MAX_CONNS}
      POOL_MIN_CONNS: ${POOL_MIN_CONNS}      
      POOL_MAX_CONN_IDLE_TIME: ${POOL_MAX_CONN_IDLE_TIME}
      POOL_MAX_CONN_LIFETIME: ${POOL_MAX_CONN_LIFETIME}
      POOL_MAX_CONN_LIFETIME_JITTER: ${POOL_MAX_CONN_LIFETIME_JITTER}
      POOL_HEALTH_CHECK_PERIOD: ${POOL_HEALTH_CHECK_PERIOD}
    ports:
      - '${API_PORT}:${API_PORT}'
    volumes:
      - ./api:/api
    working_dir: /api
    command: make watch
networks:
  app-tier:
    driver: bridge
# TODO building code for production

  # api:

  #   depends_on:
  #     datastore:
  #       condition: service_healthy